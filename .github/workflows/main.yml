name: Scrape LinkedIn Username Selector

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer
        run: npm install puppeteer@latest

      - name: Log Puppeteer Version
        run: |
          # Log the installed Puppeteer version using npm list
          npm list puppeteer --depth=0 >> output.log 2>&1 || echo "Failed to log Puppeteer version" >> output.log
        continue-on-error: true # Allow the workflow to continue even if this step fails

      - name: Scrape LinkedIn Profile
        id: scrape_step
        run: |
          # Ensure output.log is created even if empty
          touch output.log
          node -e "
          const puppeteer = require('puppeteer');
          // Custom delay function
          const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
          (async () => {
            const browser = await puppeteer.launch({ headless: 'new', args: ['--no-sandbox', '--disable-setuid-sandbox'] });
            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36');
            try {
              await page.goto('https://www.linkedin.com/in/satyanadella', { waitUntil: 'domcontentloaded', timeout: 60000 });
              await delay(2000); // Wait for page to settle

              // Check for and dismiss the sign-in modal
              const dismissButtonSelector = 'button[data-tracking-control-name=\"public_profile_contextual-sign-in-modal_modal_dismiss\"]';
              const modalExists = await page.evaluate((selector) => !!document.querySelector(selector), dismissButtonSelector);
              if (modalExists) {
                await page.click(dismissButtonSelector);
                await delay(1000); // Wait for modal to close
              }

              // Scrape the name's CSS selector
              const selector = await page.evaluate(() => {
                const nameElement = document.querySelector('h1') || 
                              document.querySelector('.text-heading-xlarge') ||
                              document.querySelector('[data-test-id=\"profile-header-name\"]');
                if (!nameElement) return 'Selector not found';
                const classList = nameElement.className.split(' ').map(cls => '.' + cls).join('');
                return classList || 'No classes found';
              });
              console.log('Latest selector:', selector);
              process.env.SELECTOR = selector;
            } catch (error) {
              console.log('Error:', error.message);
              process.env.SELECTOR = 'Failed to scrape - possible CAPTCHA or block: ' + error.message;
            }
            await browser.close();
          })();
          " >> output.log 2>&1
          # Extract selector and handle case where it might not be found
          SELECTOR_VALUE=$(cat output.log | grep 'Latest selector:' | sed 's/Latest selector: //')
          if [ -z "$SELECTOR_VALUE" ]; then
            echo "No selector found in output.log, checking for error"
            SELECTOR_VALUE=$(cat output.log | grep 'Error:' | sed 's/Error: //')
            if [ -z "$SELECTOR_VALUE" ]; then
              SELECTOR_VALUE="No data or error logged"
            fi
          fi
          echo "SELECTOR=$SELECTOR_VALUE" >> $GITHUB_ENV
          echo "Debug: SELECTOR set to $SELECTOR_VALUE" >> output.log

      - name: Send Selector to App
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"selector\": \"${{ env.SELECTOR }}\"}" \
            ${{ secrets.APP_ENDPOINT }}
        continue-on-error: true

      - name: Commit result
        run: |
          # Ensure files exist
          touch output.log
          touch result.txt
          echo "$(date -u) - Selector: ${{ env.SELECTOR }}" >> result.txt
          git config user.name 'GitHub Action'
          git config user.email 'action@github.com'
          git add result.txt output.log
          git commit -m "Update selector - $(date -u)" || echo "No changes to commit"
          git push
