on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest checkout action
        with:
          token: ${{ secrets.REPO_TOKEN }} # Token needed to push changes

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Use latest setup-node action
        with:
          node-version: '18'

      - name: Install Puppeteer
        run: npm install puppeteer@latest # Use the latest stable version

      - name: Log Puppeteer Version
        run: |
          npm list puppeteer --depth=0 >> output.log 2>&1 || echo "Failed to log Puppeteer version" >> output.log
        continue-on-error: true

      - name: Scrape LinkedIn Profile
        id: scrape_step
        run: |
          touch output.log

          node -e "
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

          (async () => {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu', '--window-size=1920,1080']
            });
            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64)...');
            await page.setExtraHTTPHeaders({
              'Accept-Language': 'en-US,en;q=0.9',
              'Accept': 'text/html,...'
            });
            await page.setViewport({ width: 1920, height: 1080 });

            let finalSelector = 'Selector not found';

            try {
              await page.goto('https://www.linkedin.com/in/satyanadella', { waitUntil: 'networkidle2', timeout: 90000 });
              await delay(3000);

              const dismissButtonSelector = 'button[data-tracking-control-name=\"public_profile_contextual-sign-in-modal_modal_dismiss\"]';
              const authwallTitleSelector = '.authwall-join-form__title';

              const isOnAuthwall = await page.$(authwallTitleSelector) !== null;
              if (isOnAuthwall) {
                  await page.waitForSelector(dismissButtonSelector, { visible: true, timeout: 10000 });
                  await page.click(dismissButtonSelector);
                  await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15000 }).catch(() => {});
                  await delay(5000);
              }

              finalSelector = await page.evaluate(() => {
                const topCardH1 = document.querySelector('.pv-top-card--list h1, .pv-top-card h1, section.pv-top-card h1');
                if (topCardH1 && topCardH1.textContent.trim().length > 0) {
                  return topCardH1.className ? '.' + topCardH1.className.trim().split(' ').join('.') : 'h1 (no class)';
                }

                const h1s = Array.from(document.querySelectorAll('h1'));
                const nameH1 = h1s.find(el => el.textContent.includes('Satya Nadella'));
                if (nameH1) {
                  return nameH1.className ? '.' + nameH1.className.trim().split(' ').join('.') : 'h1 (no class)';
                }

                const genericH1 = document.querySelector('.text-heading-xlarge, h1.top-card-layout--title');
                if (genericH1) {
                   return genericH1.className ? '.' + genericH1.className.trim().split(' ').join('.') : 'h1 (no class)';
                }

                return 'Could not find name element H1';
              });

            } catch (error) {
              const pageContentOnError = await page.content();
              fs.appendFileSync('output.log', '\\n--- Page Content On Error ---\\n' + pageContentOnError.substring(0, 2000) + '\\n--- End Content ---\\n');
              finalSelector = 'Scraping failed: ' + error.message;
            } finally {
              await browser.close();
            }

            fs.writeFileSync(process.env.GITHUB_ENV, `SCRAPED_SELECTOR=${finalSelector}\\n`, { flag: 'a' });

          })().catch(err => {
             fs.writeFileSync(process.env.GITHUB_ENV, `SCRAPED_SELECTOR=Unhandled script error: ${err.message}\\n`, { flag: 'a' });
            process.exit(1);
          });
          " >> output.log 2>&1

          echo "--- GITHUB_ENV Content ---" >> output.log
          cat $GITHUB_ENV >> output.log
          echo "--- End GITHUB_ENV Content ---" >> output.log

          EXTRACTED_SELECTOR=$(grep '^SCRAPED_SELECTOR=' $GITHUB_ENV | cut -d'=' -f2-)
          echo "Debug: Extracted SELECTOR for commit log: $EXTRACTED_SELECTOR" >> output.log

      - name: Send Selector to App (Optional)
        if: secrets.APP_ENDPOINT != ''
        run: |
          echo "Sending selector to endpoint: ${{ secrets.APP_ENDPOINT }}"
          JSON_PAYLOAD=$(jq -n --arg selector "$SCRAPED_SELECTOR" '{selector: $selector}')
          echo "Payload: $JSON_PAYLOAD" >> output.log
          curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" ${{ secrets.APP_ENDPOINT }} || echo "Failed to send selector to app" >> output.log
        continue-on-error: true

      - name: Commit result
        run: |
          touch result.txt output.log
          echo "$(date -u) - Selector: ${{ env.SCRAPED_SELECTOR }}" >> result.txt
          git config user.name 'GitHub Action Bot'
          git config user.email 'github-actions-bot@users.noreply.github.com'
          git add result.txt output.log
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update selector - $(date -u)"
            git push
          fi
        continue-on-error: true
